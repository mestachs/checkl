{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Handlebars","registerHelper","eq","v1","v2","ne","lt","gt","lte","gte","and","Array","prototype","every","call","arguments","Boolean","or","slice","some","App","useState","mode","setMode","demo","markdownParams","setMarkdownParams","undefined","markdownParamsError","setMarkdownParamsError","markdownParamsText","setMarkdownParamsText","markdownError","setMarkdownError","markdownTemplate","setMarkdownTemplate","renderedMarkdown","setRenderedMarkdown","useEffect","a","urlParams","URLSearchParams","window","location","search","markdownUrl","get","gistUrl","contentUrl","startsWith","split","join","fetch","then","response","text","markdownContent","gistId","json","gist","checklist","files","fileName","Object","keys","find","name","endsWith","params","mutacheParams","parse","content","mustacheParamsNames","body","filter","k","type","flatMap","path","parts","options","paramName","fromUrlValue","JSON","stringify","loadData","template","compile","error","message","className","id","style","color","value","onChange","event","target","cols","rows","paddingLeft","marginLeft","width","margin","onClick","print","remarkPlugins","gfm","children","href","rel","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0ab89d26.chunk.js","sourcesContent":["import \"./App.css\";\nimport Handlebars from \"handlebars\";\nimport ReactMarkdown from \"react-markdown\";\nimport gfm from \"remark-gfm\";\nimport { useEffect, useState } from \"react\";\n\nHandlebars.registerHelper({\n  eq: (v1, v2) => v1 === v2,\n  ne: (v1, v2) => v1 !== v2,\n  lt: (v1, v2) => v1 < v2,\n  gt: (v1, v2) => v1 > v2,\n  lte: (v1, v2) => v1 <= v2,\n  gte: (v1, v2) => v1 >= v2,\n  and() {\n    return Array.prototype.every.call(arguments, Boolean);\n  },\n  or() {\n    return Array.prototype.slice.call(arguments, 0, -1).some(Boolean);\n  },\n});\n\nfunction App() {\n  const [mode, setMode] = useState(\"rw\");\n  const [markdownParams, setMarkdownParams] = useState({ demo: \"Stéphan\" });\n  const [markdownParamsError, setMarkdownParamsError] = useState(undefined);\n  const [markdownParamsText, setMarkdownParamsText] = useState(\n    '{ \"demo\": \"Stéphan\" }'\n  );\n\n  const [markdownError, setMarkdownError] = useState(undefined);\n  const [markdownTemplate, setMarkdownTemplate] = useState(\"{{demo}}\");\n  const [renderedMarkdown, setRenderedMarkdown] = useState(\"\");\n\n  useEffect(() => {\n    const loadData = async () => {\n      const urlParams = new URLSearchParams(window.location.search);\n      const markdownUrl = urlParams.get(\"markdown\");\n      const gistUrl =\n        urlParams.get(\"gist\") ||\n        \"https://gist.github.com/mestachs/e1819a776ca1618b981d1de082a550aa\";\n\n      setMode(urlParams.get(\"mode\") || \"rw\");\n\n      if (markdownUrl) {\n        let contentUrl = markdownUrl;\n        if (markdownUrl.startsWith(\"https://github.com/\")) {\n          contentUrl =\n            \"https://raw.githubusercontent.com/\" +\n            markdownUrl.split(\"/\").slice(3, 5).join(\"/\") +\n            \"/\" +\n            markdownUrl.split(\"/\").slice(6).join(\"/\");\n        }\n\n        const markdownContent = await fetch(contentUrl).then((response) =>\n          response.text()\n        );\n        setMarkdownTemplate(markdownContent);\n      } else if (gistUrl) {\n        let gistId = gistUrl;\n        if (\n          gistUrl.startsWith(\"https://gist.github.com\") ||\n          gistUrl.startsWith(\"https://gist.githubusercontent.com\")\n        ) {\n          gistId = gistUrl.split(\"/\")[4];\n        }\n\n        const gist = await fetch(`https://api.github.com/gists/${gistId}`).then(\n          (response) => response.json()\n        );\n\n        let checklist = gist.files[\"tasklist.md\"] || gist.files[\"checklist.md\"];\n\n        if (checklist == undefined) {\n          const fileName = Object.keys(gist.files).find((name) =>\n            name.endsWith(\".md\")\n          );\n          checklist = gist.files[fileName];\n        }\n\n        let params = gist.files[\"params.json\"];\n\n        if (params == undefined) {\n          const mutacheParams = Handlebars.parse(checklist.content);\n\n          const mustacheParamsNames = mutacheParams.body\n            .filter((k) => k.type == \"MustacheStatement\")\n            .flatMap((k) => k.path.parts);\n\n          const options = {};\n          for (let paramName of mustacheParamsNames) {\n            let fromUrlValue = urlParams.get(\"params.\" + paramName);\n            if (fromUrlValue) {\n              if (fromUrlValue && fromUrlValue == \"false\") {\n                fromUrlValue = false;\n              }\n              if (fromUrlValue && fromUrlValue == \"true\") {\n                fromUrlValue = true;\n              }\n              options[paramName] = fromUrlValue;\n            } else {\n              options[paramName] = \"exampleValue for \" + paramName;\n            }\n          }\n\n          params = {\n            content: JSON.stringify(options),\n          };\n        }\n        if (params) {\n          setMarkdownParamsText(\n            JSON.stringify(JSON.parse(params.content), undefined, 2)\n          );\n          setMarkdownParams(JSON.parse(params.content));\n        }\n        setMarkdownTemplate(checklist.content);\n      }\n    };\n\n    loadData();\n  }, []);\n  useEffect(() => {\n    try {\n      const template = Handlebars.compile(markdownTemplate)\n      setRenderedMarkdown(template(markdownParams));\n      setMarkdownError(\"\");\n    } catch (error) {\n      setMarkdownError(error.message);\n    }\n  }, [markdownTemplate, markdownParamsText, markdownParams]);\n\n  return (\n    <div className=\"App\">\n      <div id=\"edit\" className=\"main\">\n        {mode == \"rw\" && (\n          <div className=\"noprint\">\n            <div>\n              <p>\n                <b>Parameters</b>{\" \"}\n                <span style={{ color: \"red\" }}>{markdownParamsError}</span>\n              </p>\n              <textarea\n                value={markdownParamsText}\n                onChange={(event) => {\n                  setMarkdownParamsText(event.target.value);\n                  try {\n                    setMarkdownParams(JSON.parse(event.target.value));\n                    setMarkdownParamsError(undefined);\n                  } catch (error) {\n                    setMarkdownParamsError(error.message);\n                  }\n                }}\n                cols=\"120\"\n                rows=\"10\"\n              ></textarea>\n            </div>\n            <div>\n              <p>\n                <b>Markdown template</b>{\" \"}\n                <span style={{ color: \"red\" }}>{markdownError}</span>\n              </p>\n              <textarea\n                value={markdownTemplate}\n                onChange={(event) => {\n                  setMarkdownTemplate(event.target.value);\n                }}\n                cols=\"120\"\n                rows=\"50\"\n              ></textarea>\n            </div>\n          </div>\n        )}\n        <div\n          style={{\n            paddingLeft: \"20px\",\n            marginLeft: \"20px\",\n            width: mode == \"r\" ? \"80%\" : \"\",\n            margin: mode == \"r\" ? \"auto\" : \"\",\n          }}\n        >\n          <p className=\"noprint\">\n            {mode == \"rw\" && <b>Preview</b>}\n            <button\n              style={{ marginLeft: \"20px\" }}\n              onClick={() => window.print()}\n            >\n              Print\n            </button>\n            <button\n              style={{ marginLeft: \"20px\" }}\n              onClick={() => setMode(mode == \"rw\" ? \"r\" : \"rw\")}\n            >\n              Toggle to {mode == \"rw\" ? \"r\" : \"rw\"}\n            </button>\n          </p>\n          <div className={\"checklist \" + mode}>\n            <ReactMarkdown remarkPlugins={[gfm]} children={renderedMarkdown} />\n          </div>\n        </div>\n      </div>\n      {mode == \"rw\" && (\n        <div className=\"noprint\">\n          <p>\n            <b>\n              Instantiated markdown, create a{\" \"}\n              <a\n                href=\"https://gist.github.com/\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                gist\n              </a>{\" \"}\n              and start the procedure\n            </b>\n          </p>\n          <textarea value={renderedMarkdown} cols=\"200\" rows=\"50\"></textarea>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}