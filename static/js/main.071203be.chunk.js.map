{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","demo","markdownParams","setMarkdownParams","markdownParamsText","setMarkdownParamsText","markdownTemplate","setMarkdownTemplate","useEffect","a","urlParams","URLSearchParams","window","location","search","gistUrl","get","gistContentUrl","fetch","then","r","json","params","text","textmd","JSON","stringify","undefined","loadData","markdown","Mustache","render","className","id","style","display","value","onChange","event","target","parse","error","cols","rows","marginLeft","remarkPlugins","gfm","children","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"yPAoFeA,MA9Ef,WAAgB,IAAD,EAC+BC,mBAAS,CAAEC,KAAM,eADhD,mBACNC,EADM,KACUC,EADV,OAEuCH,mBAClD,0BAHW,mBAENI,EAFM,KAEcC,EAFd,OAMmCL,mBAAS,YAN5C,mBAMNM,EANM,KAMYC,EANZ,KAQbC,qBAAU,YACM,uCAAG,oCAAAC,EAAA,6DACTC,EAAY,IAAIC,gBAAgBC,OAAOC,SAASC,QAChDC,EAAUL,EAAUM,IAAI,QAExBC,EACJF,GACA,4HANa,SASMG,MAAMD,EAAiB,gBAAgBE,MAAK,SAACC,GAAD,OAC/DA,EAAEC,UAVW,cASTC,EATS,gBAYMJ,MAAMD,EAAiB,gBAAgBE,MAAK,SAACC,GAAD,OAC/DA,EAAEG,UAbW,OAYTC,EAZS,OAgBfnB,EAAsBoB,KAAKC,UAAUJ,OAAQK,EAAW,IACxDxB,EAAkBmB,GAClBf,EAAoBiB,GAlBL,4CAAH,qDAqBdI,KACC,IAEH,IAAMC,EAAWC,IAASC,OAAOzB,EAAkBJ,GACnD,OACE,sBAAK8B,UAAU,MAAf,UACE,sBAAKC,GAAG,OAAOC,MAAO,CAAEC,QAAS,QAAjC,UACE,gCACE,gCACE,2CACA,0BACEC,MAAOhC,EACPiC,SAAU,SAACC,GACTjC,EAAsBiC,EAAMC,OAAOH,OACnC,IACEjC,EAAkBsB,KAAKe,MAAMF,EAAMC,OAAOH,QAC1C,MAAOK,MAEXC,KAAK,KACLC,KAAK,UAGT,gCACE,yCACA,0BACEP,MAAO9B,EACP+B,SAAU,SAACC,GAET/B,EAAoB+B,EAAMC,OAAOH,QAEnCM,KAAK,MACLC,KAAK,aAIX,sBAAKT,MAAO,CAAEU,WAAY,QAA1B,UACE,wCACA,cAAC,IAAD,CAAeC,cAAe,CAACC,KAAMC,SAAUlB,UAGnD,gCACE,4DACA,0BAAUO,MAAOP,EAAUa,KAAK,MAAMC,KAAK,cClEpCK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB/B,MAAK,YAAkD,IAA/CgC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASzB,OACP,cAAC,IAAM0B,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BX,K","file":"static/js/main.071203be.chunk.js","sourcesContent":["import \"./App.css\";\nimport Mustache from \"mustache\";\nimport ReactMarkdown from \"react-markdown\";\nimport gfm from \"remark-gfm\";\nimport { useEffect, useState } from \"react\";\n\nfunction App() {\n  const [markdownParams, setMarkdownParams] = useState({ demo: \"Stéphan\" });\n  const [markdownParamsText, setMarkdownParamsText] = useState(\n    '{ demo: \"Stéphan\" }'\n  );\n\n  const [markdownTemplate, setMarkdownTemplate] = useState(\"{{demo}}\");\n\n  useEffect(() => {\n    const loadData = async () => {\n      const urlParams = new URLSearchParams(window.location.search);\n      const gistUrl = urlParams.get(\"gist\");\n\n      const gistContentUrl =\n        gistUrl ||\n        \"https://gist.githubusercontent.com/mestachs/e1819a776ca1618b981d1de082a550aa/raw/cbfedc3156a166eae0eb21dcf99aaf5b6c7d9a70\";\n      /*const gistContentUrl =\n        \"https://gist.githubusercontent.com/mestachs/e1819a776ca1618b981d1de082a550aa/raw/a3be81a9913e06a108c12d432e1b14c674d0fe13\";*/\n      const params = await fetch(gistContentUrl + \"/params.json\").then((r) =>\n        r.json()\n      );\n      const textmd = await fetch(gistContentUrl + \"/tasklist.md\").then((r) =>\n        r.text()\n      );\n\n      setMarkdownParamsText(JSON.stringify(params, undefined, 2));\n      setMarkdownParams(params);\n      setMarkdownTemplate(textmd);\n    };\n\n    loadData();\n  }, []);\n\n  const markdown = Mustache.render(markdownTemplate, markdownParams);\n  return (\n    <div className=\"App\">\n      <div id=\"edit\" style={{ display: \"flex\" }}>\n        <div>\n          <div>\n            <p>Parameters</p>\n            <textarea\n              value={markdownParamsText}\n              onChange={(event) => {\n                setMarkdownParamsText(event.target.value);\n                try {\n                  setMarkdownParams(JSON.parse(event.target.value));\n                } catch (error) {}\n              }}\n              cols=\"70\"\n              rows=\"25\"\n            ></textarea>\n          </div>\n          <div>\n            <p>Markdown</p>\n            <textarea\n              value={markdownTemplate}\n              onChange={(event) => {\n                debugger;\n                setMarkdownTemplate(event.target.value);\n              }}\n              cols=\"120\"\n              rows=\"50\"\n            ></textarea>\n          </div>\n        </div>\n        <div style={{ marginLeft: \"20px\" }}>\n          <p>Preview</p>\n          <ReactMarkdown remarkPlugins={[gfm]} children={markdown} />\n        </div>\n      </div>\n      <div>\n        <p>gist to start the procedure</p>\n        <textarea value={markdown} cols=\"200\" rows=\"50\"></textarea>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}