{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","mode","setMode","demo","markdownParams","setMarkdownParams","markdownParamsText","setMarkdownParamsText","markdownTemplate","setMarkdownTemplate","useEffect","a","urlParams","URLSearchParams","window","location","search","markdownUrl","get","gistUrl","contentUrl","startsWith","split","slice","join","fetch","then","response","text","markdownContent","gistId","json","gist","params","files","no","checklist","JSON","stringify","parse","content","undefined","loadData","markdown","Mustache","render","className","id","value","onChange","event","target","error","cols","rows","style","paddingLeft","marginLeft","width","margin","onClick","print","remarkPlugins","gfm","children","href","rel","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0491d2e7.chunk.js","sourcesContent":["import \"./App.css\";\nimport Mustache from \"mustache\";\nimport ReactMarkdown from \"react-markdown\";\nimport gfm from \"remark-gfm\";\nimport { useEffect, useState } from \"react\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"rw\");\n  const [markdownParams, setMarkdownParams] = useState({ demo: \"Stéphan\" });\n  const [markdownParamsText, setMarkdownParamsText] = useState(\n    '{ demo: \"Stéphan\" }'\n  );\n\n  const [markdownTemplate, setMarkdownTemplate] = useState(\"{{demo}}\");\n\n  useEffect(() => {\n    const loadData = async () => {\n      const urlParams = new URLSearchParams(window.location.search);\n      const markdownUrl = urlParams.get(\"markdown\");\n      const gistUrl =\n        urlParams.get(\"gist\") ||\n        \"https://gist.github.com/mestachs/e1819a776ca1618b981d1de082a550aa\";\n\n      setMode(urlParams.get(\"mode\") || \"rw\");\n\n      if (markdownUrl) {\n        let contentUrl = markdownUrl;\n        if (markdownUrl.startsWith(\"https://github.com/\")) {\n          contentUrl =\n            \"https://raw.githubusercontent.com/\" +\n            markdownUrl.split(\"/\").slice(3, 5).join(\"/\") +\n            \"/\" +\n            markdownUrl.split(\"/\").slice(6).join(\"/\");\n          debugger;\n        }\n\n        const markdownContent = await fetch(contentUrl).then((response) =>\n          response.text()\n        );\n        setMarkdownTemplate(markdownContent);\n      } else if (gistUrl) {\n        let gistId = gistUrl;\n        if (\n          gistUrl.startsWith(\"https://gist.github.com\") ||\n          gistUrl.startsWith(\"https://gist.githubusercontent.com\")\n        ) {\n          gistId = gistUrl.split(\"/\")[4];\n        }\n\n        const gist = await fetch(`https://api.github.com/gists/${gistId}`).then(\n          (response) => response.json()\n        );\n\n        const params = gist.files[\"params.json\"] || { no: \"params\" };\n        const checklist =\n          gist.files[\"tasklist.md\"] || gist.files[\"checklist.md\"];\n\n        setMarkdownParamsText(\n          JSON.stringify(JSON.parse(params.content), undefined, 2)\n        );\n        setMarkdownParams(JSON.parse(params.content));\n        setMarkdownTemplate(checklist.content);\n      }\n    };\n\n    loadData();\n  }, []);\n\n  const markdown = Mustache.render(markdownTemplate, markdownParams);\n  return (\n    <div className=\"App\">\n      <div id=\"edit\" className=\"main\">\n        {mode == \"rw\" && (\n          <div className=\"noprint\">\n            <div>\n              <p>\n                <b>Parameters</b>\n              </p>\n              <textarea\n                value={markdownParamsText}\n                onChange={(event) => {\n                  setMarkdownParamsText(event.target.value);\n                  try {\n                    setMarkdownParams(JSON.parse(event.target.value));\n                  } catch (error) {}\n                }}\n                cols=\"120\"\n                rows=\"10\"\n              ></textarea>\n            </div>\n            <div>\n              <p>\n                <b>Markdown template</b>\n              </p>\n              <textarea\n                value={markdownTemplate}\n                onChange={(event) => {\n                  debugger;\n                  setMarkdownTemplate(event.target.value);\n                }}\n                cols=\"120\"\n                rows=\"50\"\n              ></textarea>\n            </div>\n          </div>\n        )}\n        <div\n          style={{\n            paddingLeft: \"20px\",\n            marginLeft: \"20px\",\n            width: mode == \"r\" ? \"80%\" : \"\",\n            margin: mode == \"r\" ? \"auto\" : \"\",\n          }}\n        >\n          <p className=\"noprint\">\n            {mode == \"rw\" && <b>Preview</b>}\n            <button\n              style={{ marginLeft: \"20px\" }}\n              onClick={() => window.print()}\n            >\n              Print\n            </button>\n          </p>\n          <div className={\"checklist \" + mode}>\n            <ReactMarkdown remarkPlugins={[gfm]} children={markdown} />\n          </div>\n        </div>\n      </div>\n      {mode == \"rw\" && (\n        <div className=\"noprint\">\n          <p>\n            <b>\n              Instantiated markdown, create a{\" \"}\n              <a\n                href=\"https://gist.github.com/\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                gist\n              </a>{\" \"}\n              and start the procedure\n            </b>\n          </p>\n          <textarea value={markdown} cols=\"200\" rows=\"50\"></textarea>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}